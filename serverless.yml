service: green-blue-and-kind-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  productTableName: ${self:custom.stage}-products
  tagTableName: ${self:custom.stage}-tags

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    productTableName: ${self:custom.productTableName}
    tagTableName: ${self:custom.tagTableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ ProductsTable, Arn ]
        - "Fn::GetAtt": [ TagsTable, Arn ]

functions:
  # Defines an HTTP API endpoint that calls the main function in products/create.js
  # - path: url path is /products
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: products/create.main
    events:
      - http:
          path: products
          method: post
          cors: true
          authorizer: aws_iam

  get:
    # Defines an HTTP API endpoint that calls the main function in products/get.js
    # - path: url path is /products/{id}
    # - method: GET request
    handler: products/get.main
    events:
      - http:
          path: products/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    # Defines an HTTP API endpoint that calls the main function in products/list.js
    # - path: url path is /products
    # - method: GET request
    handler: products/list.main
    events:
      - http:
          path: products
          method: get
          cors: true
          authorizer: aws_iam

  update:
    # Defines an HTTP API endpoint that calls the main function in products/update.js
    # - path: url path is /products/{id}
    # - method: PUT request
    handler: products/update.main
    events:
      - http:
          path: products/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    # Defines an HTTP API endpoint that calls the main function in products/delete.js
    # - path: url path is /products/{id}
    # - method: DELETE request
    handler: products/delete.main
    events:
      - http:
          path: products/{id}
          method: delete
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
