service: green-blue-and-kind-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  categoryTableName: ${self:custom.stage}-gbk-categories
  productTableName: ${self:custom.stage}-gbk-products
  tagTableName: ${self:custom.stage}-gbk-tags
  productToTagTableName: ${self:custom.stage}-gbk-productsToTags
  colorTableName: ${self:custom.stage}-gbk-colors
  productToColorTableName: ${self:custom.stage}-gbk-productsToColors
  sizeTableName: ${self:custom.stage}-gbk-sizes
  productToSizeTableName: ${self:custom.stage}-gbk-productsToSizes
  photoTableName: ${self:custom.stage}-gbk-photos
  productToPhotoTableName: ${self:custom.stage}-gbk-productsToPhotos

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    categoryTableName: ${self:custom.categoryTableName}
    productTableName: ${self:custom.productTableName}
    tagTableName: ${self:custom.tagTableName}
    productToTagTableName: ${self:custom.productToTagTableName}
    colorTableName: ${self:custom.colorTableName}
    productToColorTableName: ${self:custom.productToColorTableName}
    sizeTableName: ${self:custom.sizeTableName}
    productToSizeTableName: ${self:custom.productToSizeTableName}
    photoTableName: ${self:custom.photoTableName}
    productToPhotoTableName: ${self:custom.productToPhotoTableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ CategoriesTable, Arn ]
        - "Fn::GetAtt": [ ProductsTable, Arn ]
        - "Fn::GetAtt": [ TagsTable, Arn ]
        - "Fn::GetAtt": [ ProductsToTagsTable, Arn ]
        - "Fn::GetAtt": [ ColorsTable, Arn ]
        - "Fn::GetAtt": [ ProductsToColorsTable, Arn ]
        - "Fn::GetAtt": [ SizesTable, Arn ]
        - "Fn::GetAtt": [ ProductsToSizesTable, Arn ]
        - "Fn::GetAtt": [ PhotosTable, Arn ]
        - "Fn::GetAtt": [ ProductsToPhotosTable, Arn ]

functions:
  # Defines an HTTP API endpoint that calls the main function in categories/create.js
  # - path: url path is /categories
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createCategory:
    handler: categories/create.main
    events:
      - http:
          path: categories
          method: post
          cors: true
          authorizer: aws_iam

  getCategory:
    # Defines an HTTP API endpoint that calls the main function in categories/get.js
    # - path: url path is /categories/{id}
    # - method: GET request
    handler: categories/get.main
    events:
      - http:
          path: categories/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listCategories:
    # Defines an HTTP API endpoint that calls the main function in categories/list.js
    # - path: url path is /categories
    # - method: GET request
    handler: categories/list.main
    events:
      - http:
          path: categories
          method: get
          cors: true
          authorizer: aws_iam

  updateCategory:
    # Defines an HTTP API endpoint that calls the main function in categories/update.js
    # - path: url path is /categories/{id}
    # - method: PUT request
    handler: categories/update.main
    events:
      - http:
          path: categories/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deleteCategory:
    # Defines an HTTP API endpoint that calls the main function in categories/delete.js
    # - path: url path is /categories/{id}
    # - method: DELETE request
    handler: categories/delete.main
    events:
      - http:
          path: categories/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  # Defines an HTTP API endpoint that calls the main function in products/create.js
  # - path: url path is /products
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createProduct:
    handler: products/create.main
    events:
      - http:
          path: products
          method: post
          cors: true
          authorizer: aws_iam

  getProduct:
    # Defines an HTTP API endpoint that calls the main function in products/get.js
    # - path: url path is /products/{id}
    # - method: GET request
    handler: products/get.main
    events:
      - http:
          path: products/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listProducts:
    # Defines an HTTP API endpoint that calls the main function in products/list.js
    # - path: url path is /products
    # - method: GET request
    handler: products/list.main
    events:
      - http:
          path: products
          method: get
          cors: true
          authorizer: aws_iam

  updateProduct:
    # Defines an HTTP API endpoint that calls the main function in products/update.js
    # - path: url path is /products/{id}
    # - method: PUT request
    handler: products/update.main
    events:
      - http:
          path: products/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deleteProduct:
    # Defines an HTTP API endpoint that calls the main function in products/delete.js
    # - path: url path is /products/{id}
    # - method: DELETE request
    handler: products/delete.main
    events:
      - http:
          path: products/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  listTags:
    # Defines an HTTP API endpoint that calls the main function in tags/list.js
    # - path: url path is /tags
    # - method: GET request
    handler: tags/list.main
    events:
      - http:
          path: tags
          method: get
          cors: true
          authorizer: aws_iam

  listProductsToTags:
    # Defines an HTTP API endpoint that calls the main function in productsToTags/list.js
    # - path: url path is /productsToTags/{id}
    # - method: GET request
    handler: productsToTags/list.main
    events:
      - http:
          path: productsToTags/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listColors:
    # Defines an HTTP API endpoint that calls the main function in colors/list.js
    # - path: url path is /colors
    # - method: GET request
    handler: colors/list.main
    events:
      - http:
          path: colors
          method: get
          cors: true
          authorizer: aws_iam

  listProductsToColors:
    # Defines an HTTP API endpoint that calls the main function in productsToColors/list.js
    # - path: url path is /productsToColors/{id}
    # - method: GET request
    handler: productsToColors/list.main
    events:
      - http:
          path: productsToColors/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listSizes:
    # Defines an HTTP API endpoint that calls the main function in sizes/list.js
    # - path: url path is /sizes
    # - method: GET request
    handler: sizes/list.main
    events:
      - http:
          path: sizes
          method: get
          cors: true
          authorizer: aws_iam

  listProductsToSizes:
    # Defines an HTTP API endpoint that calls the main function in productsToSizes/list.js
    # - path: url path is /productsToSizes/{id}
    # - method: GET request
    handler: productsToSizes/list.main
    events:
      - http:
          path: productsToSizes/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listPhotos:
    # Defines an HTTP API endpoint that calls the main function in photos/list.js
    # - path: url path is /photos
    # - method: GET request
    handler: photos/list.main
    events:
      - http:
          path: photos
          method: get
          cors: true
          authorizer: aws_iam

  listProductsToPhotos:
    # Defines an HTTP API endpoint that calls the main function in productsToPhotos/list.js
    # - path: url path is /productsToPhotos/{id}
    # - method: GET request
    handler: productsToPhotos/list.main
    events:
      - http:
          path: productsToPhotos/{id}
          method: get
          cors: true
          authorizer: aws_iam

  updateItems:
    # Defines an HTTP API endpoint that calls the main function in updateItems.js
    # - path: url path is /items
    # - method: POST request
    handler: updateItems.main
    events:
      - http:
          path: items
          method: post
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
